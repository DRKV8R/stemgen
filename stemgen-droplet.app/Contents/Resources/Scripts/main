#!/bin/bash

# Exit on use of an uninitialized variable
# set -o nounset
# Exit if any statement returns a non-true return value (non-zero).
# set -o errexit

LOGO="
 _____ _____ _____ _____ _____ _____ _____ 
|   __|_   _|   __|     |   __|   __|   | |
|__   | | | |   __| | | |  |  |   __| | | |
|_____| |_| |_____|_|_|_|_____|_____|_|___|

"

SUPPORTED_FILES=('.wav' '.wave' '.aif' '.aiff' '.flac')

USAGE="$LOGO
Stemgen is a Stem file generator. Convert any track into a stem and have fun with Traktor.

Usage: $0 -i [input_path] -o [output_path]

Supported input file format: ${SUPPORTED_FILES[@]}
"
VERSION=1.0.1

INPUT_PATH=
OUTPUT_PATH=output
BASE_PATH=
FILE_NAME=
FILE_EXTENSION=

# From https://stackoverflow.com/a/53183593
DIR="$(dirname "${BASH_SOURCE[0]}")" # get the directory name
DIR="$(realpath "${DIR}")" # resolve its full path if need be

cd_root() {
    if [[ $DIR == *"/stemgen-droplet.app/"* ]]; then
        cd "$DIR"/../../../..
    else
        cd "$DIR"
    fi
}

get_cover() {
    echo "Extracting cover..."

    ffmpeg -i "$INPUT_PATH" -an -vcodec copy "$OUTPUT_PATH/$FILE_NAME/cover.jpg" -y

    echo "Done."
}

get_metadata() {
    echo "Extracting metadata..."

    ffmpeg -i "$INPUT_PATH" -f ffmetadata "$OUTPUT_PATH/$FILE_NAME/metadata.txt" -y

    echo "Done."
}

convert_to_wav() {
    echo "Converting to wav..."

    ffmpeg -i "$INPUT_PATH" -map_metadata 0:s:0 "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" -y

    echo "Done."
}

create_tags_json() {
    echo "Creating tags.json..."

    cd "$OUTPUT_PATH/$FILE_NAME"

    local path=$( cd "$(dirname "$FILE_NAME")" >/dev/null 2>&1 ; pwd -P )

    echo $path

    local tags=()

    # Add metadata, e.g. `artist` `genre`
    while IFS=$'\n' read tag; do
        title=${tag%%=*}
        title=$(echo "$title" | awk '{ print tolower($0) }')
        value=${tag##*=}
        if [[ $title == "title" ]]; then
            # Add meta `title` as `track` for `ni-stem`
            tags+=("track=${value}")
        elif [[ $title == "artist" ]] || [[ $title == "label" ]] ||
           [[ $title == "genre" ]] || [[ $title == "release" ]] ||
           [[ $title == "comment" ]] || [[ $title == "comment2" ]] ||
           [[ $title == "bpm" ]] || [[ $title == "initialkey" ]]; then
            tags+=("${title}=${value}")
        fi
    done < metadata.txt

    # Add `cover`
    if [[ -e "cover.jpg" ]]; then
        tags+=("cover=file://${path}/cover.jpg")
    fi

    echo ${tags[@]}

    jo -p -- "${tags[@]:-}" > tags.json

    cd ../../

    echo "Done."
}

split_song() {
    echo "Splitting song..."

    spleeter separate -i "$INPUT_PATH" -p spleeter:4stems-16kHz -o "$OUTPUT_PATH"

    echo "Done."
}

create_stem() {
    echo "Creating stem..."

    cd_root
    ./ni-stem/ni-stem create -s "$OUTPUT_PATH/$FILE_NAME/drums.wav" "$OUTPUT_PATH/$FILE_NAME/bass.wav" "$OUTPUT_PATH/$FILE_NAME/other.wav" "$OUTPUT_PATH/$FILE_NAME/vocals.wav" -x "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav" -t "$OUTPUT_PATH/$FILE_NAME/tags.json" -m metadata.json -f alac

    echo "Done."
}

clean_dir() {
    echo "Cleaning..."

    cd "$OUTPUT_PATH/$FILE_NAME"
    if [[ -f "$FILE_NAME.stem.m4a" ]]; then
        mv "$FILE_NAME.stem.m4a" ..
    else
        echo "Error."
        exit 2
    fi
    cd ..
    rm -rf "$FILE_NAME"

    echo "Done."
}

setup_file() {
    FILE_EXTENSION=$1
    FILE_NAME=${BASE_PATH%"$FILE_EXTENSION"}

    if [[ -d "$OUTPUT_PATH/$FILE_NAME" ]]; then
        echo "Working dir already created."
    else
        mkdir "$OUTPUT_PATH/$FILE_NAME"
        echo "Working dir created."
    fi
}

# TODO: check if file already exists
setup() {
    packages=('ffmpeg' 'spleeter' 'jo')
    for package in "${packages[@]}"; do
        if [[ $(which $package) == "" ]]; then
            echo "Please install $package before running Stemgen."
            exit 2
        fi
    done

    if [[ $(./ni-stem/ni-stem -h) == "" ]]; then
        echo "Please install ni-stem before running Stemgen."
        exit 2
    fi

    if [[ -d $OUTPUT_PATH ]]; then
        echo "Output dir already created."
    else
        mkdir $OUTPUT_PATH
        echo "Output dir created."
    fi

    BASE_PATH=${INPUT_PATH##*/}

    case "$INPUT_PATH" in
        *.wave)
            setup_file .wave
            cp "$INPUT_PATH" "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav"
            ;;
        *.wav)
            setup_file .wav
            cp "$INPUT_PATH" "$OUTPUT_PATH/$FILE_NAME/$FILE_NAME.wav"
            ;;
        *.aiff)
            setup_file .aiff
            convert_to_wav
            ;;
        *.aif)
            setup_file .aif
            convert_to_wav
            ;;
        *.flac)
            setup_file .flac
            convert_to_wav
            ;;
        *.stem.mp4)
            setup_file .stem.mp4
            convert_to_wav
            ;;
        *.stem.m4a)
            setup_file .stem.m4a
            convert_to_wav
            ;;
        *)
            echo "Invalid input file format. File should be one of:" ${SUPPORTED_FILES[@]}
            exit 1
            ;;
    esac

    echo "Ready!"
}

run() {
    echo "Generating a Stem file for $FILE_NAME..."

    get_cover
    get_metadata
    create_tags_json
    split_song
    create_stem
    clean_dir

    echo "Success! Have fun :)"
}

if [[ $DIR == *"/stemgen-droplet.app/"* ]]; then
    if [[ -d "$1" ]]; then
        for track in "$1"/*; do
            INPUT_PATH=$track
            cd_root && setup && run
        done
    else
        for track in "${@}"; do
            INPUT_PATH=$track
            cd_root && setup && run
        done
    fi
else
    while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
        -V | --version)
            echo $VERSION
            exit 0
            ;;
        -o | --output)
            shift; OUTPUT_PATH=$1
            ;;
        -i | --input)
            shift; INPUT_PATH=$1
            ;;
        -h | --help)
            echo "$USAGE"
            exit 0
            ;;
        * )
            echo "$USAGE"
            exit 1
            ;;
    esac; shift; done
    if [[ "$1" == '--' ]]; then shift; fi

    cd_root && setup && run
fi
